{"ast":null,"code":"import _objectSpread from \"/Users/jared/Development/Mod_4/Projects/chess-frontend/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nvar _jsxFileName = \"/Users/jared/Development/Mod_4/Projects/chess-frontend/src/Game/Game.js\";\nimport React from 'react';\nimport Board from '../Board/Board.js';\nimport Piece from '../Pieces/Piece.js';\nimport Bishop from '../Pieces/Bishop/Bishop.js';\nimport King from '../Pieces/King/King.js';\nimport Knight from '../Pieces/Knight/Knight.js';\nimport Pawn from '../Pieces/Pawn/Pawn.js';\nimport Queen from '../Pieces/Queen/Queen.js';\nimport Rook from '../Pieces/Rook/Rook.js';\nimport initializeBoard from '../Helpers/InitializeBoard.js';\nimport CapturedPieces from '../Board/CapturedPieces/CapturedPieces.js';\nexport default class Game extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.selectSquare = index => {\n      const squares = this.state.squares.slice();\n\n      if (this.state.selectedPiece === -1) {\n        if (!squares[index] || squares[index].player !== this.state.player) {\n          this.setState({\n            status: \"Wrong player's piece. Choose \" + this.state.turn + \" pieces.\"\n          });\n          return squares[index] ? delete squares[index].style.backgroundColor : null;\n        } else {\n          squares[index].style = _objectSpread({}, squares[index].style, {\n            backgroundColor: \"RGB(111, 143, 114)\"\n          });\n          this.setState({\n            status: \"Choose destination for the selected piece.\",\n            selectedPiece: index\n          });\n        }\n      } // else if (this.state.selectedPiece > -1) {\n      //   delete squares[this.state.selectedPiece].style.backgroundColor;\n      //   if(squares[index] && squares[index].player === this.state.player) {\n      //     this.setState({\n      //       status: \"Please make a move.\",\n      //       selectedPiece: -1,\n      //     });\n      //   }\n      //   else {\n      //     const squares = this.state.squares.slice();\n      //     const whiteCaptured = this.state.whiteCaptured.slice();\n      //     const blackCaptured = this.state.blackCaptured.slice();\n      //     const isDestinationEnemyOccupied = squares[index] ? true : false;\n      //     const isValidMove = squares[this.state.selectedPiece].isValidMove(this.state.selectedPiece, index, isDestinationEnemyOccupied);\n      //     const movePath = squares[this.state.selectedPiece].generateMovePath(this.state.selectedPiece, index, isValidMove);\n      //     const isMoveLegal = this.isMoveLegal(movePath);\n      //\n      //     if(isValidMove && isMoveLegal) {\n      //       if(squares[index] !== null) {\n      //         if(squares[index].player === 1) {\n      //           this.updateScore(squares[index]);\n      //           whiteCaptured.push(squares[index]);\n      //         }\n      //         else {\n      //           this.updateScore(squares[index]);\n      //           blackCaptured.push(squares[index]);\n      //         }\n      //       }\n      //       console.log(\"whiteCaptured\", whiteCaptured );\n      //       console.log(\"blackCaptured\", blackCaptured );\n      //       squares[index] = squares[this.state.selectedPiece];\n      //       squares[this.state.selectedPiece] = null;\n      //       let player = this.state.player === 1 ? 2 : 1;\n      //       let turn = this.state.turn === 'white' ? 'black' : 'white';\n      //       this.setState({\n      //         selectedPiece: -1,\n      //         squares: squares,\n      //         whiteCaptured: whiteCaptured,\n      //         blackCaptured: blackCaptured,\n      //         player: player,\n      //         status: '',\n      //         turn: turn,\n      //       });\n      //     }\n      //     else {\n      //       this.setState({\n      //         status: \"Please make a move.\",\n      //         selectedPiece: -1,\n      //       });\n      //     }\n      //   }\n      // }\n\n    };\n\n    this.isMoveLegal = movePath => {\n      let isLegal = true;\n\n      for (let index = 0; index < movePath; index++) {\n        if (this.state.squares[movePath[index]] !== null) {\n          isLegal = false;\n        }\n      }\n\n      return isLegal;\n    };\n\n    this.updateScore = pieceCaptured => {\n      const playerScore = this.state.player === 1 ? this.state.whiteScore : this.state.blackScore;\n      const points = pieceCaptured.state.value;\n      const updatedScore = playerScore + points;\n      return this.state.player === 1 ? this.setState({\n        whiteScore: updatedScore\n      }) : this.setState({\n        blackScore: updatedScore\n      });\n    };\n\n    this.updateSquareState = newSquares => {\n      const squares = this.state.squares;\n      const updatedSquares = newSquares;\n      this.setState({\n        squares: updatedSquares\n      });\n    };\n\n    this.unobstructedPath = path => {\n      const squares = this.state.squares;\n      let response = true;\n      path.map(pathStep => {\n        return squares[pathStep] !== null ? response = false : null;\n      });\n      return response;\n    };\n\n    this.check = () => {\n      return false;\n    };\n\n    this.state = {\n      squares: initializeBoard(),\n      users: this.props.users,\n      whiteCaptured: [],\n      blackCaptured: [],\n      whiteScore: 0,\n      blackScore: 0,\n      player: 1,\n      turn: 'white',\n      selectedPiece: -1,\n      status: '',\n      kingsPosition: {\n        white: 60,\n        black: 4\n      }\n    };\n  }\n\n  render() {\n    const _this$state = this.state,\n          squares = _this$state.squares,\n          player = _this$state.player;\n    console.log(squares);\n    console.log(player);\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 146\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"game\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 147\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"game-board\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 148\n      },\n      __self: this\n    }, React.createElement(Board, {\n      squares: squares,\n      selectSquare: i => this.selectSquare(i),\n      updateSquareState: this.updateSquareState,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 149\n      },\n      __self: this\n    })), React.createElement(\"div\", {\n      className: \"game-info\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 155\n      },\n      __self: this\n    }, React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 156\n      },\n      __self: this\n    }, \"Turn\"), React.createElement(\"div\", {\n      id: \"player-turn-box\",\n      style: {\n        backgroundColor: this.state.turn\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 157\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      className: \"game-status\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 161\n      },\n      __self: this\n    }, this.state.status), React.createElement(\"div\", {\n      className: \"capturedPieces-block\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 164\n      },\n      __self: this\n    }, React.createElement(CapturedPieces, {\n      whiteCaptured: this.state.whiteCaptured,\n      blackCaptured: this.state.blackCaptured,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 165\n      },\n      __self: this\n    })))));\n  }\n\n}","map":{"version":3,"sources":["/Users/jared/Development/Mod_4/Projects/chess-frontend/src/Game/Game.js"],"names":["React","Board","Piece","Bishop","King","Knight","Pawn","Queen","Rook","initializeBoard","CapturedPieces","Game","Component","constructor","props","selectSquare","index","squares","state","slice","selectedPiece","player","setState","status","turn","style","backgroundColor","isMoveLegal","movePath","isLegal","updateScore","pieceCaptured","playerScore","whiteScore","blackScore","points","value","updatedScore","updateSquareState","newSquares","updatedSquares","unobstructedPath","path","response","map","pathStep","check","users","whiteCaptured","blackCaptured","kingsPosition","white","black","render","console","log","i"],"mappings":"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","sourcesContent":["import React from 'react';\nimport Board from '../Board/Board.js';\nimport Piece from '../Pieces/Piece.js';\nimport Bishop from '../Pieces/Bishop/Bishop.js';\nimport King from '../Pieces/King/King.js';\nimport Knight from '../Pieces/Knight/Knight.js';\nimport Pawn from '../Pieces/Pawn/Pawn.js';\nimport Queen from '../Pieces/Queen/Queen.js';\nimport Rook from '../Pieces/Rook/Rook.js';\nimport initializeBoard from '../Helpers/InitializeBoard.js';\nimport CapturedPieces from '../Board/CapturedPieces/CapturedPieces.js';\n\nexport default class Game extends React.Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      squares: initializeBoard(),\n      users: this.props.users,\n      whiteCaptured: [],\n      blackCaptured: [],\n      whiteScore: 0,\n      blackScore: 0,\n      player: 1,\n      turn: 'white',\n      selectedPiece: -1,\n      status: '',\n      kingsPosition: {\n        white: 60,\n        black: 4\n      },\n    }\n  }\n\n  selectSquare = (index) => {\n    const squares = this.state.squares.slice();\n\n    if(this.state.selectedPiece === -1) {\n      if(!squares[index] || squares[index].player !== this.state.player) {\n        this.setState({status: \"Wrong player's piece. Choose \" + this.state.turn + \" pieces.\"});\n        return squares[index]? delete squares[index].style.backgroundColor: null;\n      }\n      else {\n        squares[index].style = {...squares[index].style, backgroundColor: \"RGB(111, 143, 114)\"};\n        this.setState({\n          status: \"Choose destination for the selected piece.\",\n          selectedPiece: index\n        });\n      }\n    }\n    // else if (this.state.selectedPiece > -1) {\n    //   delete squares[this.state.selectedPiece].style.backgroundColor;\n    //   if(squares[index] && squares[index].player === this.state.player) {\n    //     this.setState({\n    //       status: \"Please make a move.\",\n    //       selectedPiece: -1,\n    //     });\n    //   }\n    //   else {\n    //     const squares = this.state.squares.slice();\n    //     const whiteCaptured = this.state.whiteCaptured.slice();\n    //     const blackCaptured = this.state.blackCaptured.slice();\n    //     const isDestinationEnemyOccupied = squares[index] ? true : false;\n    //     const isValidMove = squares[this.state.selectedPiece].isValidMove(this.state.selectedPiece, index, isDestinationEnemyOccupied);\n    //     const movePath = squares[this.state.selectedPiece].generateMovePath(this.state.selectedPiece, index, isValidMove);\n    //     const isMoveLegal = this.isMoveLegal(movePath);\n    //\n    //     if(isValidMove && isMoveLegal) {\n    //       if(squares[index] !== null) {\n    //         if(squares[index].player === 1) {\n    //           this.updateScore(squares[index]);\n    //           whiteCaptured.push(squares[index]);\n    //         }\n    //         else {\n    //           this.updateScore(squares[index]);\n    //           blackCaptured.push(squares[index]);\n    //         }\n    //       }\n    //       console.log(\"whiteCaptured\", whiteCaptured );\n    //       console.log(\"blackCaptured\", blackCaptured );\n    //       squares[index] = squares[this.state.selectedPiece];\n    //       squares[this.state.selectedPiece] = null;\n    //       let player = this.state.player === 1 ? 2 : 1;\n    //       let turn = this.state.turn === 'white' ? 'black' : 'white';\n    //       this.setState({\n    //         selectedPiece: -1,\n    //         squares: squares,\n    //         whiteCaptured: whiteCaptured,\n    //         blackCaptured: blackCaptured,\n    //         player: player,\n    //         status: '',\n    //         turn: turn,\n    //       });\n    //     }\n    //     else {\n    //       this.setState({\n    //         status: \"Please make a move.\",\n    //         selectedPiece: -1,\n    //       });\n    //     }\n    //   }\n    // }\n\n  }\n\n  isMoveLegal = (movePath) => {\n    let isLegal = true;\n    for(let index = 0; index < movePath; index++) {\n      if(this.state.squares[movePath[index]] !== null) {\n        isLegal = false;\n      }\n    }\n    return isLegal;\n  }\n\n  updateScore = (pieceCaptured) => {\n    const playerScore = (this.state.player === 1) ? this.state.whiteScore : this.state.blackScore\n    const points = pieceCaptured.state.value;\n    const updatedScore = playerScore + points;\n    return this.state.player === 1 ? this.setState({whiteScore: updatedScore}) : this.setState({blackScore: updatedScore});\n  }\n\n  updateSquareState = (newSquares) => {\n    const { squares } = this.state;\n    const updatedSquares = newSquares;\n    this.setState({ squares: updatedSquares })\n  }\n\n  unobstructedPath = (path) => {\n    const { squares } = this.state;\n    let response = true;\n    path.map(pathStep => {\n      return (squares[pathStep] !== null) ? response = false : null;\n    })\n    return response;\n  }\n\n  check = () => {\n    return false;\n  }\n\n  render() {\n    const { squares, player } = this.state;\n    console.log(squares);\n    console.log(player);\n    return(\n      <div>\n        <div className=\"game\">\n          <div className=\"game-board\">\n            <Board\n              squares={squares}\n              selectSquare={(i) => this.selectSquare(i)}\n              updateSquareState={this.updateSquareState}\n            />\n          </div>\n          <div className=\"game-info\">\n            <h3>Turn</h3>\n            <div\n              id=\"player-turn-box\"\n              style={{backgroundColor: this.state.turn}}\n            />\n            <div className=\"game-status\">\n              {this.state.status}\n            </div>\n            <div className=\"capturedPieces-block\">\n              {<CapturedPieces\n                whiteCaptured={this.state.whiteCaptured}\n                blackCaptured={this.state.blackCaptured}\n               />}\n            </div>\n          </div>\n        </div>\n      </div>\n\n    )\n  }\n}\n"]},"metadata":{},"sourceType":"module"}