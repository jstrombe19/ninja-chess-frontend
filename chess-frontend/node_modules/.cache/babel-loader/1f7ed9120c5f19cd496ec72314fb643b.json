{"ast":null,"code":"import _objectSpread from \"/Users/jared/Development/Mod_4/Projects/chess-frontend/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nvar _jsxFileName = \"/Users/jared/Development/Mod_4/Projects/chess-frontend/src/Game/Game.js\";\nimport React from 'react';\nimport Board from '../Board/Board.js';\nimport Piece from '../Pieces/Piece.js';\nimport Bishop from '../Pieces/Bishop/Bishop.js';\nimport King from '../Pieces/King/King.js';\nimport Knight from '../Pieces/Knight/Knight.js';\nimport Pawn from '../Pieces/Pawn/Pawn.js';\nimport Queen from '../Pieces/Queen/Queen.js';\nimport Rook from '../Pieces/Rook/Rook.js';\nimport initializeBoard from '../Helpers/InitializeBoard.js';\nimport CapturedPieces from '../Board/CapturedPieces/CapturedPieces.js';\nexport default class Game extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.selectSquare = index => {\n      const squares = this.state.squares.slice();\n\n      if (this.state.selectedPiece === -1) {\n        if (!squares[index] || squares[index].player !== this.state.player) {\n          this.setState({\n            status: \"Wrong player's piece. Choose \" + this.state.turn + \" pieces.\"\n          });\n          return squares[index] ? delete squares[index].style.backgroundColor : null;\n        } else {\n          squares[index].style = _objectSpread({}, squares[index].style, {\n            backgroundColor: \"RGB(111, 143, 114)\"\n          });\n          this.setState({\n            status: \"Choose destination for the selected piece.\",\n            selectedPiece: index\n          });\n        }\n      } else if (this.state.selectedPiece > -1) {\n        delete squares[this.state.selectedPiece].style.backgroundColor;\n\n        if (squares[index] && squares[index].player === this.state.player) {\n          this.setState({\n            status: \"Please make a move.\",\n            selectedPiece: -1\n          });\n        } else {\n          const squares = this.state.squares.slice();\n          const whiteCaptured = this.state.whiteCaptured.slice();\n          const blackCaptured = this.state.blackCaptured.slice();\n          const isDestinationEnemyOccupied = squares[index] ? true : false;\n          const isValidMove = squares[this.state.selectedPiece].isValidMove(this.state.selectedPiece, index, isDestinationEnemyOccupied);\n          const movePath = squares[this.state.selectedPiece].generateMovePath(this.state.selectedPiece, index);\n          const isMoveLegal = this.isMoveLegal(movePath);\n\n          if (isValidMove && isMoveLegal) {\n            if (squares[index] !== null) {\n              if (squares[index].player === 1) {\n                this.updateScore(squares[index]);\n                whiteCaptured.push(squares[index]);\n              } else {\n                this.updateScore(squares[index]);\n                blackCaptured.push(squares[index]);\n              }\n            }\n\n            console.log(\"whiteCaptured\", whiteCaptured);\n            console.log(\"blackCaptured\", blackCaptured);\n            squares[index] = squares[this.state.selectedPiece];\n            squares[this.state.selectedPiece] = null;\n            let player = this.state.player === 1 ? 2 : 1;\n            let turn = this.state.turn === 'white' ? 'black' : 'white';\n            this.setState({\n              selectedPiece: -1,\n              squares: squares,\n              whiteCaptured: whiteCaptured,\n              blackCaptured: blackCaptured,\n              player: player,\n              status: '',\n              turn: turn\n            });\n          } else {\n            this.setState({\n              status: \"Please make a move.\",\n              selectedPiece: -1\n            });\n          }\n        }\n      }\n    };\n\n    this.updateScore = pieceCaptured => {\n      const playerScore = this.state.player === 1 ? this.state.whiteScore : this.state.blackScore;\n      const points = pieceCaptured.state.value;\n      const updatedScore = playerScore + points;\n      return this.state.player === 1 ? this.setState({\n        whiteScore: updatedScore\n      }) : this.setState({\n        blackScore: updatedScore\n      });\n    };\n\n    this.updateSquareState = newSquares => {\n      const squares = this.state.squares;\n      const updatedSquares = newSquares;\n      this.setState({\n        squares: updatedSquares\n      });\n    };\n\n    this.unobstructedPath = path => {\n      const squares = this.state.squares;\n      let response = true;\n      path.map(pathStep => {\n        return squares[pathStep] !== null ? response = false : null;\n      });\n      return response;\n    };\n\n    this.check = () => {\n      return false;\n    };\n\n    this.state = {\n      squares: initializeBoard(),\n      users: this.props.users,\n      whiteCaptured: [],\n      blackCaptured: [],\n      whiteScore: 0,\n      blackScore: 0,\n      player: 1,\n      turn: 'white',\n      selectedPiece: -1,\n      status: '',\n      kingsPosition: {\n        white: 60,\n        black: 4\n      }\n    };\n  }\n\n  render() {\n    const _this$state = this.state,\n          squares = _this$state.squares,\n          player = _this$state.player;\n    console.log(squares);\n    console.log(player);\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 136\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"game\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 137\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"game-board\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 138\n      },\n      __self: this\n    }, React.createElement(Board, {\n      squares: squares,\n      selectSquare: i => this.selectSquare(i),\n      updateSquareState: this.updateSquareState,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 139\n      },\n      __self: this\n    })), React.createElement(\"div\", {\n      className: \"game-info\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 145\n      },\n      __self: this\n    })));\n  }\n\n}","map":{"version":3,"sources":["/Users/jared/Development/Mod_4/Projects/chess-frontend/src/Game/Game.js"],"names":["React","Board","Piece","Bishop","King","Knight","Pawn","Queen","Rook","initializeBoard","CapturedPieces","Game","Component","constructor","props","selectSquare","index","squares","state","slice","selectedPiece","player","setState","status","turn","style","backgroundColor","whiteCaptured","blackCaptured","isDestinationEnemyOccupied","isValidMove","movePath","generateMovePath","isMoveLegal","updateScore","push","console","log","pieceCaptured","playerScore","whiteScore","blackScore","points","value","updatedScore","updateSquareState","newSquares","updatedSquares","unobstructedPath","path","response","map","pathStep","check","users","kingsPosition","white","black","render","i"],"mappings":"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","sourcesContent":["import React from 'react';\nimport Board from '../Board/Board.js';\nimport Piece from '../Pieces/Piece.js';\nimport Bishop from '../Pieces/Bishop/Bishop.js';\nimport King from '../Pieces/King/King.js';\nimport Knight from '../Pieces/Knight/Knight.js';\nimport Pawn from '../Pieces/Pawn/Pawn.js';\nimport Queen from '../Pieces/Queen/Queen.js';\nimport Rook from '../Pieces/Rook/Rook.js';\nimport initializeBoard from '../Helpers/InitializeBoard.js';\nimport CapturedPieces from '../Board/CapturedPieces/CapturedPieces.js';\n\nexport default class Game extends React.Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      squares: initializeBoard(),\n      users: this.props.users,\n      whiteCaptured: [],\n      blackCaptured: [],\n      whiteScore: 0,\n      blackScore: 0,\n      player: 1,\n      turn: 'white',\n      selectedPiece: -1,\n      status: '',\n      kingsPosition: {\n        white: 60,\n        black: 4\n      },\n    }\n  }\n\n  selectSquare = (index) => {\n    const squares = this.state.squares.slice();\n\n    if(this.state.selectedPiece === -1) {\n      if(!squares[index] || squares[index].player !== this.state.player) {\n        this.setState({status: \"Wrong player's piece. Choose \" + this.state.turn + \" pieces.\"});\n        return squares[index]? delete squares[index].style.backgroundColor: null;\n      }\n      else {\n        squares[index].style = {...squares[index].style, backgroundColor: \"RGB(111, 143, 114)\"};\n        this.setState({\n          status: \"Choose destination for the selected piece.\",\n          selectedPiece: index\n        });\n      }\n    }\n    else if (this.state.selectedPiece > -1) {\n      delete squares[this.state.selectedPiece].style.backgroundColor;\n      if(squares[index] && squares[index].player === this.state.player) {\n        this.setState({\n          status: \"Please make a move.\",\n          selectedPiece: -1,\n        });\n      }\n      else {\n        const squares = this.state.squares.slice();\n        const whiteCaptured = this.state.whiteCaptured.slice();\n        const blackCaptured = this.state.blackCaptured.slice();\n        const isDestinationEnemyOccupied = squares[index] ? true : false;\n        const isValidMove = squares[this.state.selectedPiece].isValidMove(this.state.selectedPiece, index, isDestinationEnemyOccupied);\n        const movePath = squares[this.state.selectedPiece].generateMovePath(this.state.selectedPiece, index);\n        const isMoveLegal = this.isMoveLegal(movePath);\n\n        if(isValidMove && isMoveLegal) {\n          if(squares[index] !== null) {\n            if(squares[index].player === 1) {\n              this.updateScore(squares[index]);\n              whiteCaptured.push(squares[index]);\n            }\n            else {\n              this.updateScore(squares[index]);\n              blackCaptured.push(squares[index]);\n            }\n          }\n          console.log(\"whiteCaptured\", whiteCaptured );\n          console.log(\"blackCaptured\", blackCaptured );\n          squares[index] = squares[this.state.selectedPiece];\n          squares[this.state.selectedPiece] = null;\n          let player = this.state.player === 1 ? 2 : 1;\n          let turn = this.state.turn === 'white' ? 'black' : 'white';\n          this.setState({\n            selectedPiece: -1,\n            squares: squares,\n            whiteCaptured: whiteCaptured,\n            blackCaptured: blackCaptured,\n            player: player,\n            status: '',\n            turn: turn,\n          });\n        }\n        else {\n          this.setState({\n            status: \"Please make a move.\",\n            selectedPiece: -1,\n          });\n        }\n      }\n    }\n\n  }\n\n  updateScore = (pieceCaptured) => {\n    const playerScore = (this.state.player === 1) ? this.state.whiteScore : this.state.blackScore\n    const points = pieceCaptured.state.value;\n    const updatedScore = playerScore + points;\n    return this.state.player === 1 ? this.setState({whiteScore: updatedScore}) : this.setState({blackScore: updatedScore});\n  }\n\n  updateSquareState = (newSquares) => {\n    const { squares } = this.state;\n    const updatedSquares = newSquares;\n    this.setState({ squares: updatedSquares })\n  }\n\n  unobstructedPath = (path) => {\n    const { squares } = this.state;\n    let response = true;\n    path.map(pathStep => {\n      return (squares[pathStep] !== null) ? response = false : null;\n    })\n    return response;\n  }\n\n  check = () => {\n    return false;\n  }\n\n  render() {\n    const { squares, player } = this.state;\n    console.log(squares);\n    console.log(player);\n    return(\n      <div>\n        <div className=\"game\">\n          <div className=\"game-board\">\n            <Board\n              squares={squares}\n              selectSquare={(i) => this.selectSquare(i)}\n              updateSquareState={this.updateSquareState}\n            />\n          </div>\n          <div className=\"game-info\">\n          </div>\n        </div>\n      </div>\n\n    )\n  }\n}\n"]},"metadata":{},"sourceType":"module"}