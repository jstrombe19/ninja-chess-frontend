{"ast":null,"code":"var _jsxFileName = \"/Users/jared/Development/Mod_4/Projects/chess-frontend/src/Game/Game.js\";\nimport React from 'react';\nimport Board from '../Board/Board.js';\nimport Piece from '../Pieces/Piece.js';\nimport Bishop from '../Pieces/Bishop/Bishop.js';\nimport King from '../Pieces/King/King.js';\nimport Knight from '../Pieces/Knight/Knight.js';\nimport Pawn from '../Pieces/Pawn/Pawn.js';\nimport Queen from '../Pieces/Queen/Queen.js';\nimport Rook from '../Pieces/Rook/Rook.js';\nimport initializeBoard from '../Helpers/InitializeBoard.js';\nimport CapturedPieces from '../Board/CapturedPieces/CapturedPieces.js';\nexport default class Game extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.selectSquare = index => {\n      const squares = this.state.squares;\n      return squares[index];\n    };\n\n    this.updateScore = pieceCaptured => {\n      const playerScore = this.state.player === 1 ? this.state.whiteScore : this.state.blackScore;\n      const points = pieceCaptured.state.value;\n      const updatedScore = playerScore + points;\n      this.state.player === 1 ? this.setState({\n        whiteScore: updatedScore\n      }) : this.setState({\n        blackScore: updatedScore\n      });\n    };\n\n    this.updateSquareState = newSquares => {\n      const squares = this.state.squares;\n      const updatedSquares = newSquares;\n      this.setState({\n        squares: updatedSquares\n      });\n    };\n\n    this.unobstructedPath = path => {\n      const squares = this.state.squares;\n      let response = true;\n      path.map(pathStep => {\n        return squares[pathStep] !== null ? response = false : null;\n      });\n      return response;\n    };\n\n    this.check = () => {\n      return false;\n    };\n\n    this.state = {\n      squares: initializeBoard(),\n      users: this.props.users,\n      whiteCaptured: [],\n      blackCaptured: [],\n      whiteScore: 0,\n      blackScore: 0,\n      player: 1,\n      turn: 'white',\n      selectedPiece: -1,\n      status: '',\n      kingsPosition: {\n        white: 60,\n        black: 4\n      }\n    };\n  }\n\n  render() {\n    const _this$state = this.state,\n          squares = _this$state.squares,\n          player = _this$state.player;\n    console.log(squares);\n    console.log(player);\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 70\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"game\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 71\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"game-board\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 72\n      },\n      __self: this\n    }, React.createElement(Board, {\n      squares: squares,\n      selectSquare: i => this.selectSquare(i),\n      updateSquareState: this.updateSquareState,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 73\n      },\n      __self: this\n    })), React.createElement(\"div\", {\n      className: \"game-info\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 79\n      },\n      __self: this\n    })));\n  }\n\n}","map":{"version":3,"sources":["/Users/jared/Development/Mod_4/Projects/chess-frontend/src/Game/Game.js"],"names":["React","Board","Piece","Bishop","King","Knight","Pawn","Queen","Rook","initializeBoard","CapturedPieces","Game","Component","constructor","props","selectSquare","index","squares","state","updateScore","pieceCaptured","playerScore","player","whiteScore","blackScore","points","value","updatedScore","setState","updateSquareState","newSquares","updatedSquares","unobstructedPath","path","response","map","pathStep","check","users","whiteCaptured","blackCaptured","turn","selectedPiece","status","kingsPosition","white","black","render","console","log","i"],"mappings":"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","sourcesContent":["import React from 'react';\nimport Board from '../Board/Board.js';\nimport Piece from '../Pieces/Piece.js';\nimport Bishop from '../Pieces/Bishop/Bishop.js';\nimport King from '../Pieces/King/King.js';\nimport Knight from '../Pieces/Knight/Knight.js';\nimport Pawn from '../Pieces/Pawn/Pawn.js';\nimport Queen from '../Pieces/Queen/Queen.js';\nimport Rook from '../Pieces/Rook/Rook.js';\nimport initializeBoard from '../Helpers/InitializeBoard.js';\nimport CapturedPieces from '../Board/CapturedPieces/CapturedPieces.js';\n\nexport default class Game extends React.Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      squares: initializeBoard(),\n      users: this.props.users,\n      whiteCaptured: [],\n      blackCaptured: [],\n      whiteScore: 0,\n      blackScore: 0,\n      player: 1,\n      turn: 'white',\n      selectedPiece: -1,\n      status: '',\n      kingsPosition: {\n        white: 60,\n        black: 4\n      },\n    }\n  }\n\n  selectSquare = (index) => {\n    const { squares } = this.state;\n    return(squares[index])\n  }\n\n  updateScore = (pieceCaptured) => {\n    const playerScore = (this.state.player === 1) ? this.state.whiteScore : this.state.blackScore\n    const points = pieceCaptured.state.value;\n    const updatedScore = playerScore + points;\n    this.state.player === 1 ? this.setState({whiteScore: updatedScore}) : this.setState({blackScore: updatedScore});\n  }\n\n  updateSquareState = (newSquares) => {\n    const { squares } = this.state;\n    const updatedSquares = newSquares;\n    this.setState({ squares: updatedSquares })\n  }\n\n  unobstructedPath = (path) => {\n    const { squares } = this.state;\n    let response = true;\n    path.map(pathStep => {\n      return (squares[pathStep] !== null) ? response = false : null;\n    })\n    return response;\n  }\n\n  check = () => {\n    return false;\n  }\n\n  render() {\n    const { squares, player } = this.state;\n    console.log(squares);\n    console.log(player);\n    return(\n      <div>\n        <div className=\"game\">\n          <div className=\"game-board\">\n            <Board\n              squares={squares}\n              selectSquare={(i) => this.selectSquare(i)}\n              updateSquareState={this.updateSquareState}\n            />\n          </div>\n          <div className=\"game-info\">\n          </div>\n        </div>\n      </div>\n\n    )\n  }\n}\n"]},"metadata":{},"sourceType":"module"}