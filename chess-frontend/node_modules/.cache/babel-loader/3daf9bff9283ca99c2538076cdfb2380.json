{"ast":null,"code":"import _objectSpread from \"/Users/jared/Development/Mod_4/Projects/chess-frontend/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nvar _jsxFileName = \"/Users/jared/Development/Mod_4/Projects/chess-frontend/src/Game/Game.js\";\nimport React from 'react';\nimport Board from '../Board/Board.js';\nimport initializeBoard from '../Helpers/InitializeBoard.js';\nimport CapturedWhitePieces from '../Board/CapturedPieces/CapturedWhitePieces.js';\nimport CapturedBlackPieces from '../Board/CapturedPieces/CapturedBlackPieces.js';\nexport default class Game extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.selectSquare = index => {\n      const squares = this.state.squares.slice();\n\n      if (this.state.selectedPiece === -1) {\n        if (!squares[index] || squares[index].player !== this.state.player) {\n          this.setState({\n            status: \"Wrong player's piece. Choose \" + this.state.turn + \" pieces.\"\n          });\n          return squares[index] ? delete squares[index].style.backgroundColor : null;\n        } else {\n          squares[index].style = _objectSpread({}, squares[index].style, {\n            backgroundColor: \"RGB(111, 143, 114)\"\n          });\n          this.setState({\n            status: \"Choose destination for the selected piece.\",\n            selectedPiece: index\n          });\n        }\n      } else if (this.state.selectedPiece > -1) {\n        delete squares[this.state.selectedPiece].style;\n\n        if (squares[index] && squares[index].player === this.state.player) {\n          this.setState({\n            status: \"Please make a move.\",\n            selectedPiece: -1\n          });\n        } else {\n          const squares = this.state.squares.slice();\n          const whiteCaptured = this.state.whiteCaptured.slice();\n          const blackCaptured = this.state.blackCaptured.slice();\n          const isDestinationEnemyOccupied = squares[index] ? true : false;\n          const isValidMove = squares[this.state.selectedPiece].isValidMove(this.state.selectedPiece, index, isDestinationEnemyOccupied);\n          const movePath = squares[this.state.selectedPiece].generateMovePath(this.state.selectedPiece, index, isValidMove);\n          const isMoveLegal = this.isMoveLegal(movePath);\n\n          if (isValidMove && isMoveLegal) {\n            if (squares[index] !== null) {\n              if (squares[index].player === 1) {\n                this.updateScore(squares[index]);\n                whiteCaptured.push(squares[index]);\n              } else {\n                this.updateScore(squares[index]);\n                blackCaptured.push(squares[index]);\n              }\n\n              this.checkForKing(squares[index]);\n            }\n\n            console.log(\"whiteCaptured\", whiteCaptured);\n            console.log(\"blackCaptured\", blackCaptured);\n            console.log(this.state.winner);\n            squares[index] = squares[this.state.selectedPiece];\n            squares[this.state.selectedPiece] = null;\n            let player = this.state.player === 1 ? 2 : 1;\n            let turn = this.state.turn === 'white' ? 'black' : 'white';\n            this.setState({\n              selectedPiece: -1,\n              squares: squares,\n              whiteCaptured: whiteCaptured,\n              blackCaptured: blackCaptured,\n              player: player,\n              status: '',\n              turn: turn\n            });\n          } else {\n            this.setState({\n              status: \"Please make a move.\",\n              selectedPiece: -1\n            });\n          }\n        }\n      }\n    };\n\n    this.checkForKing = capturedPiece => {\n      if (capturedPiece.constructor.name === 'King') {\n        alert('Congratulations! You won!');\n        const player = this.state.player;\n        console.log(player);\n        this.setState({\n          winner: player\n        });\n        console.log(winner);\n      } else {\n        return false;\n      }\n    };\n\n    this.isMoveLegal = movePath => {\n      let isLegal = true;\n\n      for (let index = 0; index < movePath; index++) {\n        if (this.state.squares[movePath[index]] !== null) {\n          isLegal = false;\n        }\n      }\n\n      return isLegal;\n    };\n\n    this.updateScore = pieceCaptured => {\n      const playerScore = this.state.player === 1 ? this.state.whiteScore : this.state.blackScore;\n      const points = pieceCaptured.state.value;\n      const updatedScore = playerScore + points;\n      return this.state.player === 1 ? this.setState({\n        whiteScore: updatedScore\n      }) : this.setState({\n        blackScore: updatedScore\n      });\n    };\n\n    this.updateSquareState = newSquares => {\n      this.setState({\n        squares: newSquares\n      });\n    };\n\n    this.unobstructedPath = path => {\n      const squares = this.state.squares;\n      let response = true;\n      path.map(pathStep => {\n        return squares[pathStep] !== null ? response = false : null;\n      });\n      return response;\n    };\n\n    this.check = () => {\n      return false;\n    };\n\n    this.sendGameStats = () => {\n      const _this$state = this.state,\n            winner = _this$state.winner,\n            users = _this$state.users;\n      console.log(winner);\n      console.log(users);\n      const stats = winner === 1 ? {\n        Winner: users[0].id,\n        Loser: users[1].id\n      } : {\n        Winner: users[1].id,\n        Loser: users[0].id\n      };\n      fetch('http://localhost:3000/api/v1/games', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          stats: stats\n        })\n      });\n    };\n\n    this.state = {\n      squares: initializeBoard(),\n      users: this.props.users,\n      whiteCaptured: [],\n      blackCaptured: [],\n      whiteScore: 0,\n      blackScore: 0,\n      player: 1,\n      turn: 'white',\n      selectedPiece: -1,\n      status: '',\n      kingsPosition: {\n        white: 60,\n        black: 4\n      },\n      winner: null\n    };\n  }\n\n  componentDidUpdate(prevProps) {\n    if (this.props.users !== prevProps.users) {\n      this.setState({\n        users: this.props.users\n      });\n    }\n  }\n\n  render() {\n    const squares = this.state.squares;\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 173\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"game\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 174\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"captured-pieces-block\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 176\n      },\n      __self: this\n    }, React.createElement(CapturedWhitePieces, {\n      whiteCaptured: this.state.whiteCaptured,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 177\n      },\n      __self: this\n    })), React.createElement(\"div\", {\n      className: \"game-board\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 183\n      },\n      __self: this\n    }, React.createElement(Board, {\n      squares: squares,\n      selectSquare: i => this.selectSquare(i),\n      updateSquareState: this.updateSquareState,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 184\n      },\n      __self: this\n    })), React.createElement(\"div\", {\n      className: \"captured-pieces-block\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 191\n      },\n      __self: this\n    }, React.createElement(CapturedBlackPieces, {\n      blackCaptured: this.state.blackCaptured,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 192\n      },\n      __self: this\n    })), React.createElement(\"div\", {\n      className: \"game-info\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 197\n      },\n      __self: this\n    }, React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 198\n      },\n      __self: this\n    }, \"Turn\"), React.createElement(\"div\", {\n      id: \"player-turn-box\",\n      style: {\n        backgroundColor: this.state.turn\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 199\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      className: \"game-status\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 203\n      },\n      __self: this\n    }, this.state.status), React.createElement(\"div\", {\n      className: \"scoreboard\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 206\n      },\n      __self: this\n    }, React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 207\n      },\n      __self: this\n    }, \"Score\"), React.createElement(\"h5\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 208\n      },\n      __self: this\n    }, \"White: \", this.state.whiteScore), React.createElement(\"h5\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 209\n      },\n      __self: this\n    }, \"Black: \", this.state.blackScore)))));\n  }\n\n}","map":{"version":3,"sources":["/Users/jared/Development/Mod_4/Projects/chess-frontend/src/Game/Game.js"],"names":["React","Board","initializeBoard","CapturedWhitePieces","CapturedBlackPieces","Game","Component","constructor","props","selectSquare","index","squares","state","slice","selectedPiece","player","setState","status","turn","style","backgroundColor","whiteCaptured","blackCaptured","isDestinationEnemyOccupied","isValidMove","movePath","generateMovePath","isMoveLegal","updateScore","push","checkForKing","console","log","winner","capturedPiece","name","alert","isLegal","pieceCaptured","playerScore","whiteScore","blackScore","points","value","updatedScore","updateSquareState","newSquares","unobstructedPath","path","response","map","pathStep","check","sendGameStats","users","stats","Winner","id","Loser","fetch","method","headers","body","JSON","stringify","kingsPosition","white","black","componentDidUpdate","prevProps","render","i"],"mappings":"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","sourcesContent":["import React from 'react';\nimport Board from '../Board/Board.js';\nimport initializeBoard from '../Helpers/InitializeBoard.js';\nimport CapturedWhitePieces from '../Board/CapturedPieces/CapturedWhitePieces.js';\nimport CapturedBlackPieces from '../Board/CapturedPieces/CapturedBlackPieces.js';\n\nexport default class Game extends React.Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      squares: initializeBoard(),\n      users: this.props.users,\n      whiteCaptured: [],\n      blackCaptured: [],\n      whiteScore: 0,\n      blackScore: 0,\n      player: 1,\n      turn: 'white',\n      selectedPiece: -1,\n      status: '',\n      kingsPosition: {\n        white: 60,\n        black: 4\n      },\n      winner: null,\n    }\n  }\n\n  componentDidUpdate(prevProps) {\n    if(this.props.users !== prevProps.users) {\n      this.setState({ users: this.props.users});\n    }\n  }\n\n  selectSquare = (index) => {\n    const squares = this.state.squares.slice();\n\n    if(this.state.selectedPiece === -1) {\n      if(!squares[index] || squares[index].player !== this.state.player) {\n        this.setState({status: \"Wrong player's piece. Choose \" + this.state.turn + \" pieces.\"});\n        return squares[index] ? delete squares[index].style.backgroundColor : null;\n      }\n      else {\n        squares[index].style = {...squares[index].style, backgroundColor: \"RGB(111, 143, 114)\"};\n        this.setState({\n          status: \"Choose destination for the selected piece.\",\n          selectedPiece: index\n        });\n      }\n    }\n    else if (this.state.selectedPiece > -1) {\n      delete squares[this.state.selectedPiece].style;\n      if(squares[index] && squares[index].player === this.state.player) {\n        this.setState({\n          status: \"Please make a move.\",\n          selectedPiece: -1,\n        });\n      }\n      else {\n        const squares = this.state.squares.slice();\n        const whiteCaptured = this.state.whiteCaptured.slice();\n        const blackCaptured = this.state.blackCaptured.slice();\n        const isDestinationEnemyOccupied = squares[index] ? true : false;\n        const isValidMove = squares[this.state.selectedPiece].isValidMove(this.state.selectedPiece, index, isDestinationEnemyOccupied);\n        const movePath = squares[this.state.selectedPiece].generateMovePath(this.state.selectedPiece, index, isValidMove);\n        const isMoveLegal = this.isMoveLegal(movePath);\n\n        if(isValidMove && isMoveLegal) {\n          if(squares[index] !== null) {\n            if(squares[index].player === 1) {\n              this.updateScore(squares[index]);\n              whiteCaptured.push(squares[index]);\n            }\n            else {\n              this.updateScore(squares[index]);\n              blackCaptured.push(squares[index]);\n            }\n            this.checkForKing(squares[index]);\n          }\n\n          console.log(\"whiteCaptured\", whiteCaptured );\n          console.log(\"blackCaptured\", blackCaptured );\n          console.log(this.state.winner);\n          squares[index] = squares[this.state.selectedPiece];\n          squares[this.state.selectedPiece] = null;\n          let player = this.state.player === 1 ? 2 : 1;\n          let turn = this.state.turn === 'white' ? 'black' : 'white';\n          this.setState({\n            selectedPiece: -1,\n            squares: squares,\n            whiteCaptured: whiteCaptured,\n            blackCaptured: blackCaptured,\n            player: player,\n            status: '',\n            turn: turn,\n          });\n        }\n        else {\n          this.setState({\n            status: \"Please make a move.\",\n            selectedPiece: -1,\n          });\n        }\n      }\n    }\n\n  }\n\n  checkForKing = (capturedPiece) => {\n    if(capturedPiece.constructor.name === 'King') {\n      alert('Congratulations! You won!')\n      const player = this.state.player;\n      console.log(player);\n      this.setState({ winner: player })\n      console.log(winner);\n    }\n    else {\n      return false;\n    }\n  }\n\n  isMoveLegal = (movePath) => {\n    let isLegal = true;\n    for(let index = 0; index < movePath; index++) {\n      if(this.state.squares[movePath[index]] !== null) {\n        isLegal = false;\n      }\n    }\n    return isLegal;\n  }\n\n  updateScore = (pieceCaptured) => {\n    const playerScore = (this.state.player === 1) ? this.state.whiteScore : this.state.blackScore\n    const points = pieceCaptured.state.value;\n    const updatedScore = playerScore + points;\n    return this.state.player === 1 ? this.setState({whiteScore: updatedScore}) : this.setState({blackScore: updatedScore});\n  }\n\n  updateSquareState = (newSquares) => {\n    this.setState({ squares: newSquares })\n  }\n\n  unobstructedPath = (path) => {\n    const { squares } = this.state;\n    let response = true;\n    path.map(pathStep => {\n      return (squares[pathStep] !== null) ? response = false : null;\n    })\n    return response;\n  }\n\n  check = () => {\n    return false;\n  }\n\n  sendGameStats = () => {\n    const { winner, users } =  this.state;\n    console.log(winner);\n    console.log(users);\n    const stats = (winner === 1) ? {Winner: users[0].id, Loser: users[1].id} : {Winner: users[1].id, Loser: users[0].id};\n    fetch('http://localhost:3000/api/v1/games', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({stats: stats})\n    })\n  }\n\n  render() {\n    const { squares } = this.state;\n    return(\n      <div>\n        <div className=\"game\">\n\n          <div className=\"captured-pieces-block\">\n            {<CapturedWhitePieces\n              whiteCaptured={this.state.whiteCaptured}\n             />}\n          </div>\n\n\n          <div className=\"game-board\">\n            <Board\n              squares={squares}\n              selectSquare={(i) => this.selectSquare(i)}\n              updateSquareState={this.updateSquareState}\n            />\n          </div>\n\n          <div className=\"captured-pieces-block\">\n            {<CapturedBlackPieces\n              blackCaptured={this.state.blackCaptured}\n             />}\n          </div>\n\n          <div className=\"game-info\">\n            <h3>Turn</h3>\n            <div\n              id=\"player-turn-box\"\n              style={{backgroundColor: this.state.turn}}\n            />\n            <div className=\"game-status\">\n              {this.state.status}\n            </div>\n            <div className=\"scoreboard\">\n              <h3>Score</h3>\n              <h5>White: {this.state.whiteScore}</h5>\n              <h5>Black: {this.state.blackScore}</h5>\n            </div>\n          </div>\n\n        </div>\n      </div>\n\n    )\n  }\n}\n"]},"metadata":{},"sourceType":"module"}