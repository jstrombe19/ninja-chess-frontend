{"ast":null,"code":"import './Piece.css';\nexport default class Piece {\n  constructor(player, iconUrl) {\n    this.generateMovePath = (origin, destination, incrementor) => {\n      const path = [];\n\n      if (origin < destination && incrementor !== 0) {\n        for (let index = origin; index < destination + 1; index += incrementor) {\n          path.push(index);\n        }\n      } else if (origin > destination && incrementor !== 0) {\n        for (let index = destination; index < origin + 1; index += incrementor) {\n          path.push(index);\n        }\n      }\n\n      console.log(path);\n      return path;\n    };\n\n    this.player = player;\n    this.style = {\n      backgroundImage: \"url('\" + iconUrl + \"')\"\n    };\n  }\n\n}","map":{"version":3,"sources":["/Users/jared/Development/Mod_4/Projects/chess-frontend/src/Pieces/Piece.js"],"names":["Piece","constructor","player","iconUrl","generateMovePath","origin","destination","incrementor","path","index","push","console","log","style","backgroundImage"],"mappings":"AAAA,OAAO,aAAP;AAEA,eAAe,MAAMA,KAAN,CAAY;AACzBC,EAAAA,WAAW,CAACC,MAAD,EAASC,OAAT,EAAkB;AAAA,SAK7BC,gBAL6B,GAKV,CAACC,MAAD,EAASC,WAAT,EAAsBC,WAAtB,KAAsC;AACvD,YAAMC,IAAI,GAAG,EAAb;;AACA,UAAIH,MAAM,GAAGC,WAAT,IAAwBC,WAAW,KAAK,CAA5C,EAAgD;AAC9C,aAAI,IAAIE,KAAK,GAAGJ,MAAhB,EAAwBI,KAAK,GAAGH,WAAW,GAAG,CAA9C,EAAiDG,KAAK,IAAIF,WAA1D,EAAuE;AACrEC,UAAAA,IAAI,CAACE,IAAL,CAAUD,KAAV;AACD;AACF,OAJD,MAIO,IAAKJ,MAAM,GAAGC,WAAT,IAAwBC,WAAW,KAAK,CAA7C,EAAiD;AACtD,aAAI,IAAIE,KAAK,GAAGH,WAAhB,EAA6BG,KAAK,GAAGJ,MAAM,GAAG,CAA9C,EAAiDI,KAAK,IAAIF,WAA1D,EAAuE;AACrEC,UAAAA,IAAI,CAACE,IAAL,CAAUD,KAAV;AACD;AACF;;AACDE,MAAAA,OAAO,CAACC,GAAR,CAAYJ,IAAZ;AACA,aAAOA,IAAP;AACD,KAlB4B;;AAC3B,SAAKN,MAAL,GAAcA,MAAd;AACA,SAAKW,KAAL,GAAa;AAACC,MAAAA,eAAe,EAAE,UAAQX,OAAR,GAAgB;AAAlC,KAAb;AACD;;AAJwB","sourcesContent":["import './Piece.css';\n\nexport default class Piece {\n  constructor(player, iconUrl) {\n    this.player = player;\n    this.style = {backgroundImage: \"url('\"+iconUrl+\"')\"};\n  }\n\n  generateMovePath = (origin, destination, incrementor) => {\n    const path = [];\n    if( origin < destination && incrementor !== 0 ) {\n      for(let index = origin; index < destination + 1; index += incrementor) {\n        path.push(index);\n      }\n    } else if ( origin > destination && incrementor !== 0 ) {\n      for(let index = destination; index < origin + 1; index += incrementor) {\n        path.push(index);\n      }\n    } \n    console.log(path);\n    return path;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}