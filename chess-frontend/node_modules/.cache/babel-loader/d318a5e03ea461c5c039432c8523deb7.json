{"ast":null,"code":"import Piece from '../Pieces/Piece.js';\nimport Bishop from '../Pieces/Bishop/Bishop.js';\nimport King from '../Pieces/King/King.js';\nimport Knight from '../Pieces/Knight/Knight.js';\nimport Pawn from '../Pieces/Pawn/Pawn.js';\nimport Queen from '../Pieces/Queen/Queen.js';\nimport Rook from '../Pieces/Rook/Rook.js';\n\nfunction initializeBoard() {\n  // Instantiate blank board squares\n  const squares = Array(64).fill(null); // Populate respective squares with pawns of either type\n\n  for (let index = 8; index < 16; index++) {\n    squares[index] = new Pawn(2);\n    squares[index + 40] = new Pawn(1);\n  } // Populate respective squares with rooks of either type\n\n\n  for (let index = 0; index < 8; index += 7) {\n    squares[index] = new Rook(2);\n    squares[index + 56] = new Rook(1);\n  } // Populate respective squares with knights of either type\n\n\n  for (let index = 1; index < 6; index += 5) {\n    squares[index] = new Knight(2);\n    squares[index + 56] = new Knight(1);\n  } // Populate respective squares with bishops of either type\n\n\n  for (let index = 2; index < 6; index += 3) {\n    squares[index] = new Bishop(2);\n    squares[index + 56] = new Bishop(1);\n  } // Place queens\n\n\n  squares[3] = new Queen(2);\n  squares[59] = new Queen(1); // Place kings\n\n  squares[4] = new King(2);\n  squares[60] = new King(1);\n  return squares;\n}\n\nexport default initializeBoard;","map":{"version":3,"sources":["/Users/jared/Development/Mod_4/Projects/chess-frontend/src/Helpers/InitializeBoard.js"],"names":["Piece","Bishop","King","Knight","Pawn","Queen","Rook","initializeBoard","squares","Array","fill","index"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,oBAAlB;AACA,OAAOC,MAAP,MAAmB,4BAAnB;AACA,OAAOC,IAAP,MAAiB,wBAAjB;AACA,OAAOC,MAAP,MAAmB,4BAAnB;AACA,OAAOC,IAAP,MAAiB,wBAAjB;AACA,OAAOC,KAAP,MAAkB,0BAAlB;AACA,OAAOC,IAAP,MAAiB,wBAAjB;;AAEA,SAASC,eAAT,GAA2B;AACzB;AACA,QAAMC,OAAO,GAAGC,KAAK,CAAC,EAAD,CAAL,CAAUC,IAAV,CAAe,IAAf,CAAhB,CAFyB,CAGzB;;AACA,OAAI,IAAIC,KAAK,GAAG,CAAhB,EAAmBA,KAAK,GAAG,EAA3B,EAA+BA,KAAK,EAApC,EAAwC;AACtCH,IAAAA,OAAO,CAACG,KAAD,CAAP,GAAiB,IAAIP,IAAJ,CAAS,CAAT,CAAjB;AACAI,IAAAA,OAAO,CAACG,KAAK,GAAG,EAAT,CAAP,GAAsB,IAAIP,IAAJ,CAAS,CAAT,CAAtB;AACD,GAPwB,CAQzB;;;AACA,OAAI,IAAIO,KAAK,GAAG,CAAhB,EAAmBA,KAAK,GAAG,CAA3B,EAA8BA,KAAK,IAAI,CAAvC,EAA0C;AACxCH,IAAAA,OAAO,CAACG,KAAD,CAAP,GAAiB,IAAIL,IAAJ,CAAS,CAAT,CAAjB;AACAE,IAAAA,OAAO,CAACG,KAAK,GAAG,EAAT,CAAP,GAAsB,IAAIL,IAAJ,CAAS,CAAT,CAAtB;AACD,GAZwB,CAazB;;;AACA,OAAI,IAAIK,KAAK,GAAG,CAAhB,EAAmBA,KAAK,GAAG,CAA3B,EAA8BA,KAAK,IAAI,CAAvC,EAA0C;AACxCH,IAAAA,OAAO,CAACG,KAAD,CAAP,GAAiB,IAAIR,MAAJ,CAAW,CAAX,CAAjB;AACAK,IAAAA,OAAO,CAACG,KAAK,GAAG,EAAT,CAAP,GAAsB,IAAIR,MAAJ,CAAW,CAAX,CAAtB;AACD,GAjBwB,CAkBzB;;;AACA,OAAI,IAAIQ,KAAK,GAAG,CAAhB,EAAmBA,KAAK,GAAG,CAA3B,EAA8BA,KAAK,IAAI,CAAvC,EAA0C;AACxCH,IAAAA,OAAO,CAACG,KAAD,CAAP,GAAiB,IAAIV,MAAJ,CAAW,CAAX,CAAjB;AACAO,IAAAA,OAAO,CAACG,KAAK,GAAG,EAAT,CAAP,GAAsB,IAAIV,MAAJ,CAAW,CAAX,CAAtB;AACD,GAtBwB,CAuBzB;;;AACAO,EAAAA,OAAO,CAAC,CAAD,CAAP,GAAa,IAAIH,KAAJ,CAAU,CAAV,CAAb;AACAG,EAAAA,OAAO,CAAC,EAAD,CAAP,GAAc,IAAIH,KAAJ,CAAU,CAAV,CAAd,CAzByB,CA0BzB;;AACAG,EAAAA,OAAO,CAAC,CAAD,CAAP,GAAa,IAAIN,IAAJ,CAAS,CAAT,CAAb;AACAM,EAAAA,OAAO,CAAC,EAAD,CAAP,GAAc,IAAIN,IAAJ,CAAS,CAAT,CAAd;AAEA,SAAOM,OAAP;AACD;;AAED,eAAeD,eAAf","sourcesContent":["import Piece from '../Pieces/Piece.js';\nimport Bishop from '../Pieces/Bishop/Bishop.js';\nimport King from '../Pieces/King/King.js';\nimport Knight from '../Pieces/Knight/Knight.js';\nimport Pawn from '../Pieces/Pawn/Pawn.js';\nimport Queen from '../Pieces/Queen/Queen.js';\nimport Rook from '../Pieces/Rook/Rook.js';\n\nfunction initializeBoard() {\n  // Instantiate blank board squares\n  const squares = Array(64).fill(null);\n  // Populate respective squares with pawns of either type\n  for(let index = 8; index < 16; index++) {\n    squares[index] = new Pawn(2);\n    squares[index + 40] = new Pawn(1);\n  }\n  // Populate respective squares with rooks of either type\n  for(let index = 0; index < 8; index += 7) {\n    squares[index] = new Rook(2);\n    squares[index + 56] = new Rook(1);\n  }\n  // Populate respective squares with knights of either type\n  for(let index = 1; index < 6; index += 5) {\n    squares[index] = new Knight(2);\n    squares[index + 56] = new Knight(1);\n  }\n  // Populate respective squares with bishops of either type\n  for(let index = 2; index < 6; index += 3) {\n    squares[index] = new Bishop(2);\n    squares[index + 56] = new Bishop(1);\n  }\n  // Place queens\n  squares[3] = new Queen(2);\n  squares[59] = new Queen(1);\n  // Place kings\n  squares[4] = new King(2);\n  squares[60] = new King(1);\n\n  return squares\n}\n\nexport default initializeBoard;\n"]},"metadata":{},"sourceType":"module"}